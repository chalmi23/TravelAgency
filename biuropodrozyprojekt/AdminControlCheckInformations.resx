<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>